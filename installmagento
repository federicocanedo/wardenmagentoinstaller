#!/usr/bin/python3

import sys, os, json, argparse, subprocess

def menu():
	
	option=""
	while option != "0":
		os.chdir(f"{originPath}/installations")
		os.system("clear")
		print("Choose an option \n")
		print("1- Existing installations")
		print("2- Create installation")
		print("\n0- Exit\n")

		option = input()
		if option == "1": menuExistingInstallations()
		if option == "2":  menuCreateInstallation()
	

def menuCreateInstallation():
	os.system("clear")
	installations = os.popen('ls').read().split("\n")
	installations = installations[0:len(installations)-1]
	print("Input your installation name (Must be unique):")
	newDomain = input().lower()
	if newDomain in installations:
		print("Domain name already in installations folder")
		return
	newVersion = input(f"\n{newDomain}'s Magento version\n").lower()
	if newVersion not in versions:
		print("Version not in magentoversions.json")
		return
	newSample = input("Sampledata y/n\n").lower()
	newSampleBoolean = newSample == "y" or newSample == "yes"
	magentoInstaller(newVersion, newDomain, newSampleBoolean)
	

def menuExistingInstallations():
	installations = os.popen('ls').read().split("\n")
	installations = installations[0:len(installations)-1]
	runningcontainers = os.popen("docker ps --format '{{.Names}}' ").read()
	os.system("clear")
	print("Existing installacions\n")
	i = 0
	for installation in installations:
		i=i+1
		print(f"{i}- {installation}", end = " ")
		if  f"\n{installation}_" in runningcontainers:
			print(f"[RUNNING]")
		else:
			print("[NOT RUNNING]")

	print("\n0- Exit\n")

	option = input()
	if option == "0": return
	if option.isdigit():
		if int(option) <= len(installations):
			menuInstallation(installations[int(option)-1])

def menuInstallation(domain):
	os.system("clear")
	os.chdir(domain)
	print(f"Installation {domain} \n")
	getBaseUrl(domain)
	print("\n1- Open shell")
	print("2- Start installation")
	print("3- Stop installation")
	print("4- Install ngrok")
	print("5- Remove ngrok")
	print("6- Remove installation")
	print("\n0- Exit\n")

	option = input()
	if option == "1": os.system("warden shell")
	if option == "2": os.system("warden env up")
	if option == "3": os.system("warden env stop")
	if option == "4": ngrokInstaller(domain, input("Input your ngrok token:\n").split("\n")[0])
	if option == "5": ngrokRemove(domain)
	if option == "6": os.system(f"warden env down -v; cd ..; rm -rf {domain}")

def wardenSetup(domain, version):
	os.system(f"warden env-init {domain} magento2")
	modifyEnv(version)
	os.system(f"warden sign-certificate {domain}.test")
	os.system("warden env up")

def loadVersions():
    #Loads magentoversions.json
    with open("magentoversions.json", "r") as f:
        versions = json.load(f)["version"]
    return versions

def downloadMagento(version, domain):
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'wget {magentoUrl}{version}.tar.gz'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'tar xvzf {version}.tar.gz; shopt -s dotglob; mv magento2-{version}/* .'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'composer install'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'chmod +x bin/magento'")

def magentoInstaller(version, domain, sampledata):
	os.system("pwd")
	os.system(f"mkdir {domain}")
	os.system("ls")
	os.chdir(domain)
	wardenSetup(domain, version)
	downloadMagento(version, domain)

	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'chmod +x bin/magento'")
	
	installerCommand =  f"bin/magento setup:install --db-host=db --db-name=magento --db-user=magento --db-password=magento --admin-firstname={adminFirstName} --admin-lastname={adminLastName} --admin-email={adminEmail} --admin-user={adminUser} --admin-password={adminPass} --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --backend-frontname=admin --session-save=redis --session-save-redis-host=redis --session-save-redis-port=6379 --session-save-redis-db=2 --session-save-redis-max-concurrency=20 --cache-backend=redis --cache-backend-redis-server=redis --cache-backend-redis-db=0 --cache-backend-redis-port=6379 --page-cache=redis --page-cache-redis-server=redis --page-cache-redis-db=1 --page-cache-redis-port=6379"
	if "elasticsearch" in versions[version]:
		installerCommand = installerCommand + " --elasticsearch-host=elasticsearch --elasticsearch-port=9200"
	print(installerCommand)
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c '{installerCommand}'")
	
	magentourl="https://${TRAEFIK_SUBDOMAIN}.${TRAEFIK_DOMAIN}/"
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/unsecure/base_url {magentourl}'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/secure/base_url {magentourl}'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/secure/use_in_frontend 1; bin/magento config:set --lock-env web/secure/use_in_adminhtml 1; bin/magento config:set --lock-env web/seo/use_rewrites 1'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento indexer:reindex'")
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento -f setup:static-content:deploy; bin/magento cache:flush; bin/magento cron:install'")

	if "twofactor" in versions[version]:
		os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento module:disable Magento_TwoFactorAuth; bin/magento setup:upgrade; bin/magento cache:flush'")

	if sampledata:
		os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento sampledata:deploy;bin/magento setup:upgrade; bin/magento cache:flush;bin/magento -f setup:static-content:deploy'")


def setBaseUrl(domain, url):
        os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:set web/unsecure/base_url {url} --lock-env;'")
        os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:set web/secure/base_url {url} --lock-env;'")
        os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento c:f'")
        print(url)

def getBaseUrl(domain):
	os.system(f"docker exec {domain}_php-fpm_1 /bin/bash -c 'bin/magento config:show web/unsecure/base_url'")

def ngrokRemove(domain):
	os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; killall ngrok; rm tunnels ngrok-v3-stable-linux-amd64.tgz'")
	setBaseUrl(domain, f"https://{domain}.test")

def ngrokInstaller(domain, ngrokToken):
    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; killall ngrok; rm tunnels ngrok-v3-stable-linux-amd64.tgz'")
    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz'")
    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; tar xvzf ngrok-v3-stable-linux-amd64.tgz'")
    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; ./ngrok config add-authtoken {ngrokToken}'")
    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; ./ngrok http 80 > /dev/null &'")

    os.system(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; wget http://localhost:4040/api/tunnels'")
    try:
        ngrokjson = json.load(os.popen(f"docker exec {domain}_nginx_1 /bin/bash -c 'cd; cat tunnels'"))
        ngrokurl =  f"{ngrokjson['tunnels'][0]['public_url']}/"
        if ngrokurl:
            setBaseUrl(domain, ngrokurl)
    except:
        print("ngrok setup failed")


def modifyEnv(version):
	print(f"version= {versions[version]}")
	#change to php version
	os.system(f"{sed_i} 's/PHP_VERSION=7.4/PHP_VERSION={versions[version]['php']}/g' .env")

	#change the composer version
	os.system(f"{sed_i} 's/COMPOSER_VERSION=1/COMPOSER_VERSION={versions[version]['composer']}/g' .env")

	#change the mariadb version
	os.system(f"{sed_i} 's/MARIADB_VERSION=10.3/MARIADB_VERSION={versions[version]['mariadb']}/g' .env")
	
	#disable rabit
	os.system(f"{sed_i} 's/WARDEN_RABBITMQ=1/WARDEN_RABBITMQ=0/g' .env")

	#disable PHP_XDEBUG_3
	os.system(f"{sed_i} 's/PHP_XDEBUG_3=1/PHP_XDEBUG_3=0/g' .env")

	#disable varnish
	os.system(f"{sed_i} 's/WARDEN_VARNISH=1/WARDEN_VARNISH=0/g' .env")

	if "elasticsearch" in versions[version]:
		os.system(f"{sed_i} 's/ELASTICSEARCH_VERSION=7.6/ELASTICSEARCH_VERSION={versions[version]['elasticsearch']}/g' .env")
	else:
		os.system(f"{sed_i} 's/WARDEN_ELASTICSEARCH=1/WARDEN_ELASTICSEARCH=0/g' .env")


def main():
	os.system("mkdir -p installations")
	os.chdir("installations")
	parser = argparse.ArgumentParser(description = "Warden Magento Installer")
	parser.add_argument("-H", "--Help", help = "Example: Help argument", required = False, default = "")    
	parser.add_argument("-d", "--domain", help = "Example: -d 244test", required = False, default = "")
	parser.add_argument("-v", "--magentoversion", help = "Example: -v 2.4.4", required = False, default = "")
	parser.add_argument("-n", "--ngrok", help = "Example: -n auth_token", required = False, default = "")
	parser.add_argument("-s","--sampledata", default=False, action='store_true')

	argument = parser.parse_args()
	magentoVersion = argument.magentoversion
	domain = argument.domain
	ngrok = argument.ngrok
	sampledata = argument.sampledata

	if ( not(domain and ngrok) or not(domain and magentoVersion)):
		menu()
		return

	if (domain and magentoVersion):
		if magentoVersion not in versions:
			print('Version not supported')
			return
		magentoInstaller(magentoVersion, domain, sampledata)

	if (domain and ngrok):
		if not f"\n{domain}_" in os.popen("docker ps --format '{{.Names}}' ").read():
			print ('Domain not found in running containers')
			return
		ngrokInstaller(domain, ngrok)


adminFirstName = "admin"
adminLastName = "admin"
adminEmail = "admin@email.com"
adminUser = "admin"
adminPass =	"q1w2e3r4"


magentoUrl = "https://github.com/magento/magento2/archive/refs/tags/"
ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz/"
versions = loadVersions()
originPath = os.popen('pwd').read().split("\n")[0]
sed_i = "sed -i" if os.popen('uname -s').read() == "Linux\n" else "sed -i ''"

if __name__ == "__main__":
	main()

