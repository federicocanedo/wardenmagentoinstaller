#!/usr/bin/python3

import sys, getopt, os, json, argparse



def loadVersions():
    #Loads magentoversions.json
    with open("magentoversions.json", "r") as f:
        versions = json.load(f)["version"]
    return versions


def magentoInstaller(v, d, s):
	magentoFile = f"magento2-with-samples-{v}.tar.gz" if s else f"magento2-{v}.tar.gz"

	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'wget {magentoUrl}{magentoFile}'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'tar xvzf {magentoFile}'")

	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'chmod +x bin/magento'")
	
	installerCommand =  f"bin/magento setup:install --db-host=db --db-name=magento --db-user=magento --db-password=magento --admin-firstname={adminFirstName} --admin-lastname={adminLastName} --admin-email={adminEmail} --admin-user={adminUser} --admin-password={adminPass} --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1 --backend-frontname=admin --session-save=redis --session-save-redis-host=redis --session-save-redis-port=6379 --session-save-redis-db=2 --session-save-redis-max-concurrency=20 --cache-backend=redis --cache-backend-redis-server=redis --cache-backend-redis-db=0 --cache-backend-redis-port=6379 --page-cache=redis --page-cache-redis-server=redis --page-cache-redis-db=1 --page-cache-redis-port=6379"
	if "elasticsearch" in versions[v]:
		installerCommand = installerCommand + " --elasticsearch-host=elasticsearch --elasticsearch-port=9200"
	print(installerCommand)
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c '{installerCommand}'")
	
	magentourl="https://${TRAEFIK_SUBDOMAIN}.${TRAEFIK_DOMAIN}/"
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/unsecure/base_url {magentourl}'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/secure/base_url {magentourl}'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento config:set --lock-env web/secure/use_in_frontend 1; bin/magento config:set --lock-env web/secure/use_in_adminhtml 1; bin/magento config:set --lock-env web/seo/use_rewrites 1'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento indexer:reindex'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento -f setup:static-content:deploy; bin/magento cache:flush; bin/magento cron:install'")
	os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'rm {magentoFile}'")

	if "twofactor" in versions[v]:
		os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento module:disable Magento_TwoFactorAuth; bin/magento setup:upgrade; bin/magento cache:flush'")


def ngrokInstaller(d, n):
	os.system(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz'")
	os.system(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; tar xvzf ngrok-v3-stable-linux-amd64.tgz'")
	os.system(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; ./ngrok config add-authtoken {n}'")
	os.system(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; ./ngrok http 80 > /dev/null &'")

	os.system(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; wget http://localhost:4040/api/tunnels'")
	ngrokjson = json.load(os.popen(f"docker exec {d}_nginx_1 /bin/bash -c 'cd; cat tunnels'"))
	ngrokurl =  f"{ngrokjson['tunnels'][0]['public_url']}/"

	
	if ngrokurl:
		os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento config:set web/unsecure/base_url {ngrokurl} --lock-env;'")
		os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento config:set web/secure/base_url {ngrokurl} --lock-env;'")
		os.system(f"docker exec {d}_php-fpm_1 /bin/bash -c 'bin/magento c:f'")

	print(ngrokurl)


def modifyEnv(v):
	print(f"version= {versions[v]}")
	#change to php version
	os.system(f"{sed_i} 's/PHP_VERSION=7.4/PHP_VERSION={versions[v]['php']}/g' .env")

	#change the composer version
	os.system(f"{sed_i} 's/COMPOSER_VERSION=1/COMPOSER_VERSION={versions[v]['composer']}/g' .env")

	#change the mariadb version
	os.system(f"{sed_i} 's/MARIADB_VERSION=10.3/MARIADB_VERSION={versions[v]['mariadb']}/g' .env")
	
	#disable rabit
	os.system(f"{sed_i} 's/WARDEN_RABBITMQ=1/WARDEN_RABBITMQ=0/g' .env")
	os.system(f"{sed_i} 's/PHP_XDEBUG_3=1/PHP_XDEBUG_3=0/g' .env")

	#disable varnish
	os.system(f"{sed_i} 's/WARDEN_VARNISH=1/WARDEN_VARNISH=0/g' .env")

	if "elasticsearch" in versions[v]:
		os.system(f"{sed_i} 's/ELASTICSEARCH_VERSION=7.6/ELASTICSEARCH_VERSION={versions[v]['elasticsearch']}/g' .env")
	else:
		os.system(f"{sed_i} 's/WARDEN_ELASTICSEARCH=1/WARDEN_ELASTICSEARCH=0/g' .env")


def main():
	parser = argparse.ArgumentParser(description = "Warden Magento Installer")
	parser.add_argument("-H", "--Help", help = "Example: Help argument", required = False, default = "")    
	parser.add_argument("-d", "--domain", help = "Example: -d 244test", required = True, default = "")
	parser.add_argument("-v", "--magentoversion", help = "Example: -v 2.4.4", required = True, default = "")
	parser.add_argument("-n", "--ngrok", help = "Example: -n auth_token", required = False, default = "")
	parser.add_argument("-s","--sampledata", default=False, action='store_true')

	argument = parser.parse_args()
	magentoVersion = argument.magentoversion
	domain = argument.domain
	ngrok = argument.ngrok
	sampledata = argument.sampledata

	if magentoVersion not in versions:
		print ('version not supported')
		sys.exit(2)

	os.mkdir(domain)
	os.chdir(domain)

	os.system(f"warden env-init {domain} magento2")

	modifyEnv(magentoVersion)

	os.system(f"warden sign-certificate {domain}.test")
	os.system("warden env up")

	magentoInstaller(magentoVersion, domain, sampledata)

	if ngrok:
		ngrokInstaller(domain, ngrok)


adminFirstName = "Federico"
adminLastName = "Canedo"
adminEmail = "federicoc@ebizmarts.com"
adminUser = "admin"
adminPass =	"q1w2e3r4"


magentoUrl = "http://pubfiles.nexcess.net/magento/ce-packages/"
versions = loadVersions()
sampledata = False
sed_i = "sed -i" if os.popen('uname -s').read() == "Linux\n" else "sed -i ''"

if __name__ == "__main__":
	main()

